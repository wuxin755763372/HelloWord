<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>testGitHub</groupId>
	<artifactId>gitHub-parent</artifactId>
	<version>1.0.0</version>
	<packaging>pom</packaging>

	<properties>
		<!-- JDK version -->
		<java.version>1.8</java.version>
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<!-- Source encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- Integration test output directory -->
		<project.build.itSourceDirectory>src/it/java</project.build.itSourceDirectory>
		<project.build.itResourcesDirectory>src/it/resources</project.build.itResourcesDirectory>
		<project.build.itOutputDirectory>${project.build.directory}/it-classes</project.build.itOutputDirectory>
		<!-- Library versions -->
		<spring.version>4.2.6.RELEASE</spring.version>
		<spring-session.version>1.2.0.RELEASE</spring-session.version>
		<spring-data.version>1.11.0.RELEASE</spring-data.version>
		<spring-data-redis.version>1.6.0.RELEASE</spring-data-redis.version>
		<jackson.version>2.6.1</jackson.version>
		<aspectj.version>1.8.7</aspectj.version>
		<slf4j.version>1.7.12</slf4j.version>
		<log4j2.version>2.3</log4j2.version>
		<servlet-api.version>3.1.0</servlet-api.version>
		<jsp-api.version>2.1</jsp-api.version>
		<jstl.version>1.2</jstl.version>
		<junit.version>4.12</junit.version>
		<mysql-connector.version>5.1.36</mysql-connector.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		<commons-collections.version>3.2.1</commons-collections.version>
		<commons-io.version>2.4</commons-io.version>
		<commons-csv.version>1.2</commons-csv.version>
		<commons-validator.version>1.4.1</commons-validator.version>
		<commons-beanutils.version>1.9.2</commons-beanutils.version>
		<jaxb.version>2.2.12</jaxb.version>
		<jedis.version>2.7.3</jedis.version>
		<datastore-protobuf.version>v1beta2-rev1-4.0.0</datastore-protobuf.version>
		<easymock.version>3.4</easymock.version>
		<powermock.version>1.6.3</powermock.version>
		<sendgrid.version>2.2.2</sendgrid.version>
		<c3p0.version>0.9.5.2</c3p0.version>
		<aspectjrt.version>1.8.7</aspectjrt.version>
		<google-pubsub.version>v1-rev5-1.20.0</google-pubsub.version>
		<google-api.version>1.20.0</google-api.version>
		<!-- Plugin versions -->
		<maven.compiler.version>3.3</maven.compiler.version>
		<maven.resources.version>2.7</maven.resources.version>
		<maven.javadoc.version>2.10.3</maven.javadoc.version>
		<maven.checkstyle.version>2.16</maven.checkstyle.version>
		<maven.findbugs.version>3.0.2</maven.findbugs.version>
		<maven.reports.version>2.8.1</maven.reports.version>
		<maven.surefire.version>2.18.1</maven.surefire.version>
		<maven.failsafe.version>2.18.1</maven.failsafe.version>
		<maven.jacoco.version>0.7.5.201505241946</maven.jacoco.version>
		<maven.build-helper.version>1.9.1</maven.build-helper.version>
		<maven.antrun.version>1.8</maven.antrun.version>
		<maven.war.version>2.6</maven.war.version>
	</properties>

	<!-- Global dependencies, can be used in all projects -->
	<dependencies>
		<!-- Slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>		

		<!-- log4j2 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Apache Commons-Lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- Apache Commons-Collections -->
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
		</dependency>

		<!-- Junit Framework -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Easymock Framework -->
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Powermock plugin for Easymock -->
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-module-junit4</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.powermock</groupId>
			<artifactId>powermock-api-easymock</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Uses dependencyManagement for unified version -->
	<dependencyManagement>
		<dependencies>
			<!-- log4j2 -->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j-impl</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j2.version}</version>
				<scope>runtime</scope>
			</dependency>

			<!--slf4j -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- jcl-over-slf4j for Spring framework -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
				<scope>runtime</scope>
			</dependency>

			<!-- Spring framework (BOM) -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${spring.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- aspectjweaver for Spring framework -->
			<dependency>
 				<groupId>org.aspectj</groupId>
				<artifactId>aspectjrt</artifactId>
				<version>${aspectjrt.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>${aspectj.version}</version>
				<scope>runtime</scope>
			</dependency>

			<!-- Jackson for Spring framework -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<!-- Spring Session -->
			<dependency>
				<groupId>org.springframework.session</groupId>
				<artifactId>spring-session</artifactId>
				<version>${spring-session.version}</version>
			</dependency>

			<!-- Spring Data Commons -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-commons</artifactId>
				<version>${spring-data.version}</version>
			</dependency>

			<!-- Spring Data Redis -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-redis</artifactId>
				<version>${spring-data-redis.version}</version>
			</dependency>

			<!-- Jedis (Redis Client) -->
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>${jedis.version}</version>
			</dependency>

			<!-- Apache Commons-Lang3 -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>

			<!-- Apache Commons-IO -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<!-- Apache Commons-Collections -->
			<dependency>
				<groupId>commons-collections</groupId>
				<artifactId>commons-collections</artifactId>
				<version>${commons-collections.version}</version>
			</dependency>

			<!-- Apache Commons-BeanUtils -->
			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${commons-beanutils.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- Apache Commons-Validator -->
			<dependency>
				<groupId>commons-validator</groupId>
				<artifactId>commons-validator</artifactId>
				<version>${commons-validator.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- Apache Commons-CSV -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-csv</artifactId>
				<version>${commons-csv.version}</version>
			</dependency>

			<!-- Java Architecture For XML Binding -->
			<dependency>
				<groupId>javax.xml.bind</groupId>
				<artifactId>jaxb-api</artifactId>
				<version>${jaxb.version}</version>
			</dependency>

			<!-- MySQL Connector for Java -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>${mysql-connector.version}</version>
				<scope>runtime</scope>
			</dependency>

			<!-- Google API -->
			<dependency>
				<groupId>com.google.apis</groupId>
				<artifactId>google-api-services-datastore-protobuf</artifactId>
				<version>${datastore-protobuf.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.api-client</groupId>
						<artifactId>google-api-client</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.oauth-client</groupId>
						<artifactId>google-oauth-client</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.google.http-client</groupId>
						<artifactId>google-http-client</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<dependency>
				<groupId>com.google.api-client</groupId>
				<artifactId>google-api-client</artifactId>
				<version>${google-api.version}</version>
			</dependency>
			
			<dependency>
				<groupId>com.google.oauth-client</groupId>
				<artifactId>google-oauth-client</artifactId>
				<version>${google-api.version}</version>
			</dependency>
			
			<dependency>
				<groupId>com.google.http-client</groupId>
				<artifactId>google-http-client</artifactId>
				<version>${google-api.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.apache.httpcomponents</groupId>
						<artifactId>httpclient</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>com.google.apis</groupId>
				<artifactId>google-api-services-pubsub</artifactId>
				<version>${google-pubsub.version}</version>
			</dependency>

			<!-- SendGrid -->
			<dependency>
				<groupId>com.sendgrid</groupId>
				<artifactId>sendgrid-java</artifactId>
				<version>${sendgrid.version}</version>
			</dependency>

			<!-- J2EE Web Container API -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${servlet-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${jsp-api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
				<scope>provided</scope>
			</dependency>

			<!-- Junit Framework -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- Easymock Framework -->
			<dependency>
				<groupId>org.easymock</groupId>
				<artifactId>easymock</artifactId>
				<version>${easymock.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- Powermock plugin for Easymock -->
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-core</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-module-junit4</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-api-easymock</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- C3P0 -->
			<dependency>
				<groupId>com.mchange</groupId>
				<artifactId>c3p0</artifactId>
				<version>${c3p0.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<reporting>
		<plugins>
			<!-- Maven Project Info Reports plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>${maven.reports.version}</version>
			</plugin>
			<!-- Javadoc plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>${maven.javadoc.version}</version>
			</plugin>
			<!-- Checkstyle plugin -->
			<plugin>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${maven.checkstyle.version}</version>
				<configuration>
					<configLocation>${basedir}/../dev-conf/checkstyle/checkstyle.xml</configLocation>
					<enableRulesSummary>false</enableRulesSummary>
				</configuration>
			</plugin>
			<!-- Findbugs report plugin (Unit Test Report) -->
			<!-- Requires setting 'export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=128m" ' -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<version>${maven.findbugs.version}</version>
				<configuration>
					<excludeFilterFile>${basedir}/../dev-conf/findbugs/exclude-filter.xml</excludeFilterFile>
				</configuration>
			</plugin>
			<!-- JaCoCo plugin -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${maven.jacoco.version}</version>
			</plugin>
		</plugins>
	</reporting>

	<build>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
			<testResource>
				<directory>${project.build.itResourcesDirectory}</directory>
			</testResource>
		</testResources>

		<plugins>
			<!-- Surefire plugin (Run the JUnit unit tests in an isolated classloader) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.version}</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<includes>
						<include>**/test/**/*Test.java</include>
					</includes>
				</configuration>
			</plugin>
			<!-- JaCoCo plugin (Java code coverage) -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${maven.jacoco.version}</version>
				<executions>
					<!-- Configuring The Code Coverage Report for Unit Tests -->
					<execution>
						<id>jacoco-ut-exec</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>jacoco-ut-report</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>

					<!-- Configuring The Code Coverage Report for Integration Tests -->
					<execution>
						<id>jacoco-it-exec</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${project.build.directory}/coverage-reports/jacoco-it.exec</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after integration tests have been run. -->
					<execution>
						<id>jacoco-it-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${project.build.directory}/coverage-reports/jacoco-it.exec</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Failsafe plugin (Run the JUnit integration tests in an isolated classloader) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven.failsafe.version}</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe Maven plugin are executed. -->
					<execution>
						<id>integration-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>
							<testClassesDirectory>${project.build.itOutputDirectory}</testClassesDirectory>
							<includes>
								<include>**/it/**/*Test.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Create integration test directory -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>${maven.antrun.version}</version>
				<executions>
					<execution>
						<id>create-it-classes-directory</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<echo message="Creating Directory ${project.build.itOutputDirectory}" />
								<mkdir dir="${project.build.itOutputDirectory}" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Use build-helper-maven-plugin to add it source and resource directory -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${maven.build-helper.version}</version>
				<executions>
					<!-- Add a new source directory to our build -->
					<execution>
						<id>add-it-sources</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<!-- Configures the source directory of our integration tests -->
							<sources>
								<source>${project.build.itSourceDirectory}</source>
							</sources>
						</configuration>
					</execution>
					<!-- Add a new resource directory to our build -->
					<execution>
						<id>add-it-resources</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<!-- Configures the resource directory of our integration tests -->
							<resources>
								<resource>
									<directory>${project.build.itResourcesDirectory}</directory>
									<targetPath>${project.build.itOutputDirectory}</targetPath>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>add-empty-directory</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.build.itSourceDirectory}</directory>
									<targetPath>${project.build.itOutputDirectory}</targetPath>
									<excludes>
										<exclude>**/*</exclude>
									</excludes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Copy resources for integration tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.resources.version}</version>
				<executions>
					<execution>
						<id>copy-it-resources</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.itOutputDirectory}</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.itResourcesDirectory}</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Compiler plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.version}</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
				<executions>
					<!-- Compile for integration tests -->
					<execution>
						<id>compile-it-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>testCompile</goal>
						</goals>
						<configuration>
							<compilerArguments>
								<d>${project.build.itOutputDirectory}</d>
							</compilerArguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>environment-specific</id>
			<activation>
				<property>
					<name>env</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-war-plugin</artifactId>
						<version>${maven.war.version}</version>
						<configuration>
							<webResources>
								<resource>
									<directory>${basedir}/../release-conf/${env}</directory>
									<targetPath>WEB-INF/classes</targetPath>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<targetPath>WEB-INF/classes</targetPath>
								</resource>
							</webResources>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>